// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"rizhua.com/application"
	"rizhua.com/domain"
	"rizhua.com/infrastructure/persistence"
	"rizhua.com/interface/http"
	"xorm.io/xorm"
)

// Injectors from wire.go:

func BuildInjector(db *xorm.Engine) (*Injector, func(), error) {
	brand := persistence.NewBrand(db)
	brandService := domain.NewBrandService(brand)
	applicationBrandService := application.NewBrandService(brandService, brand)
	bundle := persistence.NewBundle(db)
	node := persistence.NewNode(db)
	bundleService := domain.NewBundleService(bundle, node)
	user := persistence.NewUser(db)
	emp := persistence.NewEmp(db)
	org := persistence.NewOrg(db)
	userService := domain.NewUserService(user, emp, org)
	applicationBundleService := application.NewBundleService(bundleService, bundle, node, userService)
	category := persistence.NewCategory(db)
	categoryService := domain.NewCategoryService(category)
	applicationCategoryService := application.NewCategoryService(categoryService, category)
	nodeService := domain.NewNodeService(node, user, bundle)
	applicationNodeService := application.NewNodeService(nodeService, node, userService)
	order := persistence.NewOrder(db)
	orderService := domain.NewOrderService(order)
	applicationOrderService := application.NewOrderService(orderService, userService)
	spu := persistence.NewSpu(db)
	attribute := persistence.NewAttribute(db)
	productService := domain.NewProductService(spu, category, attribute)
	applicationProductService := application.NewProductService(productService, spu, attribute)
	role := persistence.NewRole(db)
	roleService := domain.NewRoleService(role)
	applicationRoleService := application.NewRoleService(roleService, role, userService)
	dept := persistence.NewDept(db)
	structureService := domain.NewStructureService(org, dept, user, bundle, node)
	applicationStructureService := application.NewStructureService(structureService, org, dept, role, emp, userService)
	systemService := application.NewSystemService()
	applicationUserService := application.NewUserService(userService, user)
	handler := http.NewHandler(applicationBrandService, applicationBundleService, applicationCategoryService, applicationNodeService, applicationOrderService, applicationProductService, applicationRoleService, applicationStructureService, systemService, applicationUserService)
	router := http.NewRouter(handler)
	engine := InitGinEngine(router)
	injector := NewInjector(engine)
	return injector, func() {
	}, nil
}
